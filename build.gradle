buildscript {
  project.ext {

    uploadRepo = { project ->
      nexusRoot = 'https://s01.oss.sonatype.org/content/repositories'
      return {
        url "$nexusRoot/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
//        credentials { username ossrhUsername; password ossrhPassword }
      }
    }
    repoClosure = {

      maven { url 'https://maven.aliyun.com/repository/public/' }
      maven { url 'https://maven.aliyun.com/repository/spring/' }
      maven { url "https://repo.spring.io/snapshot/" }
      maven { url "https://repo1.maven.org/maven2/" }

      mavenCentral()

      mavenLocal()

    }
    versionTail = new Date().format('yyMMddHHmm')
  }
  dependencies {

  }
  repositories repoClosure
}

allprojects { project ->

  project.repositories rootProject.repoClosure

  group = 'org.letter'
  version = versionTail
}

def mavenPublishIgnoreList = ['']

subprojects { project ->

  apply plugin: 'java'
  apply plugin: 'java-library'

  apply plugin: 'maven-publish'


  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  tasks.withType(Test) {
    defaultCharacterEncoding = "UTF-8"
  }
  dependencies {
    implementation "org.slf4j:slf4j-api:${slf4j_version}"
    api "org.projectlombok:lombok:${lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${lombok_version}"
    api "org.mapstruct:mapstruct:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockito_version}"
    testImplementation "org.mockito:mockito-inline:${mockito_version}"


  }
  configurations {
    all {
      resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
      exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
      exclude group: 'javax.validation', module: 'com.springsource.javax.validation'
    }
  }
  test {
    useJUnitPlatform {
      includeEngines 'junit-jupiter'
    }
  }
  task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
  }

  if (!(project.name in mavenPublishIgnoreList)) {
    publishing {
      repositories {
        maven uploadRepo(project)
      }
      publications {
        maven(MavenPublication) {
          from components.java
          artifact sourceJar
        }
      }
    }
  }


}
